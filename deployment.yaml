apiVersion: v1
kind: Service
metadata:
  name: stackmap-mapserver
spec:
  selector:
    app: stackmap-mapserver
  ports:
  - name: "http"
    protocol: "TCP"
    port: 6000
    targetPort: 80
  - name: "https"
    protocol: "TCP"
    port: 6443
    targetPort: 443
  type: ClusterIP

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: wms
# spec:
#   ingressClassName: traefik
#   rules:
#   - host: stackmap.clouds.is
#     http:
#       paths:
#       - path: /services/wms
#         pathType: Prefix
#         backend:
#           service:
#             name: stackmap-mapserver
#             port:
#               number: 6000
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: mapserver
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`stackmap.clouds.is`) && PathPrefix(`/services/wms`)
      kind: Rule
      services:
        - name: stackmap-mapserver
          port: 6000
      middlewares:
        - name: mapserver-stripprefix
---  
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: mapserver-stripprefix
spec:
  replacePath:
    path: /
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mapserver
spec:
  selector:
    matchLabels:
      app: stackmap-mapserver
  replicas: 1
  template:
    metadata:
      labels:
        app: stackmap-mapserver
    spec:
      containers:
      - name: mapserver
        image: camptocamp/mapserver:8.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: shared-mapfiles-volume
          mountPath: /mapfiles/
        - name: nfs
          mountPath: /data/
        env:
        - name: MS_DEBUGLEVEL
          value: "5"
        - name: MS_MAPFILE
          value: /mapfiles/rasters.map
        - name: MS_MAPFILE_PATTERN
          value: ".*"
        - name: MS_MAP_PATTERN
          value: ".*"

      - name: msrv-config-runner
        image: msrv-config-runner:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: 500Mi
            cpu: 0.5
          limits:
            memory: 500Mi
            cpu: 0.5
        env:
        - name: MAPFILESDIR
          value: /mapfiles/
        - name: APIHOST
          value: http://stackmap-api.default.svc.cluster.local:3000
            #value: http://psqlapi-service.default.svc.cluster.local:3003 #psqlapi-service.default.svc.cluster.local:3003/api/v1/products
        - name: PSQLHOST
          value: stackmap-db-postgresql.default.svc.cluster.local
          #value: postgresql.default.svc.cluster.local
        - name: PSQLUSER
          value: postgres
        - name: PSQLDB
          value: postgres 
        - name: PSQLPASS
          valueFrom:
            secretKeyRef:
              name: stackmap-db-postgresql
              key: postgres-password
        - name: RABBITMQ_HOST
          value: stackmap-rabbitmq.default.svc.cluster.local
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: stackmap-rabbitmq
              key: rabbitmq-password
        volumeMounts:
        - name: shared-mapfiles-volume
          mountPath: /mapfiles/
            # name must match the volume name below


      # initContainer:
      #   - name: 
      #     image: msrv-config-runner
      #     command: ["/bin/sh", "-c", "cp -R /app/data/rasters.map /mapfiles/"]
      #     volumeMounts:
      #     - name: shared-mapfiles-volume
      #       mountPath: /mapfiles
      volumes:
        - name: shared-mapfiles-volume
          emptyDir: {}
          #medium: Memory
          #sizeLimit: 100Mi
        - name: nfs
          persistentVolumeClaim:
            claimName: nfs

#        
